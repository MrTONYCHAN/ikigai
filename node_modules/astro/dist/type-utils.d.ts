export type Simplify<T> = {
    [KeyType in keyof T]: T[KeyType];
} & {};
export type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
export type OmitIndexSignature<ObjectType> = {
    [KeyType in keyof ObjectType as {} extends Record<KeyType, unknown> ? never : KeyType]: ObjectType[KeyType];
};
export type ValueOf<T> = T[keyof T];
